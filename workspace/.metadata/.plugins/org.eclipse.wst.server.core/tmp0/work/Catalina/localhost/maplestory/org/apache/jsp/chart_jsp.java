/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.59
 * Generated at: 2021-02-19 13:53:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("\ttable, th, td{\r\n");
      out.write("\t\tborder: 1px #000 solid;\r\n");
      out.write("\t\tborder-collapse: collapse;\r\n");
      out.write("\t\ttext-align:center;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\ttable{\r\n");
      out.write("\t\twidth:1000px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tth{\r\n");
      out.write("\t\tbackground-color: #C9C9C9\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h2>위습의 원더베리</h2>\r\n");
      out.write("\t<h5>아이템을 클릭하면 해당 아이템만 그래프로 조회됩니다.</h5>\r\n");
      out.write("\t\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>아이템</th>\r\n");
      out.write("\t\t\t<th>고지확률</th>\r\n");
      out.write("\t\t\t<th>실제확률</th>\r\n");
      out.write("\t\t\t<th>오차(%p)</th>\r\n");
      out.write("\t\t\t<th>오차(%)</th>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>고농축 프리미엄 생명의 물 (5689005)</td>\r\n");
      out.write("\t\t\t<td>15.02 %</td>\r\n");
      out.write("\t\t\t<td>15.061 %</td>\r\n");
      out.write("\t\t\t<td class=pp>+0.041 %</td>\r\n");
      out.write("\t\t\t<td class=p>+0.271 %</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>오가닉 원더 쿠키 (5240169)</td>\r\n");
      out.write("\t\t\t<td>15.02 %</td>\r\n");
      out.write("\t\t\t<td>15.049 %</td>\r\n");
      out.write("\t\t\t<td class=pp>+0.029 %</td>\r\n");
      out.write("\t\t\t<td class=p>+0.191 %</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>붕어빵단팥이 (5002229)</td>\r\n");
      out.write("\t\t\t<td>12 %</td>\r\n");
      out.write("\t\t\t<td>11.992 %</td>\r\n");
      out.write("\t\t\t<td class=pp>-0.008 %</td>\r\n");
      out.write("\t\t\t<td class=p>-0.067 %</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>붕어빵크림이 (5002230)</td>\r\n");
      out.write("\t\t\t<td>12 %</td>\r\n");
      out.write("\t\t\t<td>12.016 %</td>\r\n");
      out.write("\t\t\t<td class=pp>+0.016 %</td>\r\n");
      out.write("\t\t\t<td class=p>-0.131 %</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t\r\n");
      out.write("\t</table>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\twindow.onload = function() {\r\n");
      out.write("\t\tvar ppList = document.getElementsByClassName('pp')\r\n");
      out.write("\t\tvar pList = document.getElementsByClassName('p')\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tArray.prototype.forEach.call(ppList, function(item){\r\n");
      out.write("\t\t\tvar text = item.innerHTML\r\n");
      out.write("\t\t\tif(Number(text.substring(0,6))>0){\r\n");
      out.write("\t\t\t\titem.style.color = \"red\";\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\titem.style.color = \"blue\";\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tArray.prototype.forEach.call(pList, function(item){\r\n");
      out.write("\t\t\tvar text = item.innerHTML\r\n");
      out.write("\t\t\tif(Number(text.substring(0,6))>0){\r\n");
      out.write("\t\t\t\titem.style.color = \"red\";\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\titem.style.color = \"blue\";\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
